{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "vpcTag": {
      "Type": "String"
    },
    "igTag": {
      "Type": "String"
    },
    "publicRouteTableTag": {
      "Type": "String"
    },
    "privateRouteTableTag": {
      "Type": "String"
    },
    "webSubnetTag": {
      "Type": "String"
    },
    "webSubnet2Tag": {
      "Type": "String"
    },
    "webSubnet3Tag": {
      "Type": "String"
    },
    "dbSubnetTag": {
      "Type": "String"
    },
    "dbSubnet2Tag": {
      "Type": "String"
    },
    "webServerSecurityGroupNameTag": {
      "Type": "String"
    },
    "dbSecurityGroupNameTag": {
      "Type": "String"
    },
    "vpccidr": {
      "Type": "String"
    },
    "websubnetcidr": {
      "Type": "String"
    },
    "websubnet2cidr": {
      "Type": "String"
    },
    "websubnet3cidr": {
      "Type": "String"
    },
    "dbsubnet1cidr": {
      "Type": "String"
    },
    "dbsubnet2cidr": {
      "Type": "String"
    },
    "webSubnetZone": {
      "Type": "String"
    },
    "webSubnetZone2": {
      "Type": "String"
    },
    "webSubnetZone3": {
      "Type": "String"
    },
    "ec2AMI": {
      "Type": "String"
    },
    "InstanceTypeParameter": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "m1.small",
        "m1.large"
      ],
      "Description": "Enter t2.micro, m1.small, or m1.large. Default is t2.micro."
    },
    "RdsUserName": {
      "Type": "String"
    },
    "RdsPassword": {
      "Type": "String"
    },
    "RdsHostname": {
      "Type": "String"
    },
    "Bucketname": {
      "Type": "String",
      "Default": "codedeploy.vaibhavikhamar.me",
      "Description": "UPLOADING ARTIFACTS BUCKET"
    },
    "AWSREGION": {
      "Type": "String",
      "Default": "us-east-1"
    },
    "AWSACCOUNTID": {
      "Type": "String",
      "Default": "148155028146"
    },
    "ApplicationName": {
      "Type": "String",
      "Default": "csye6225-webapp"
    },
    "AWSCodeDeployRoleARN": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
    },
    "domainID": {
      "Type": "String",
      "Default": "Z06278801ORQI542DKPE6"
    },
    "domainName": {
      "Type": "String",
      "Default": "dev.vaibhavikhamar.me."
    },
    "S3BucketLambda":{
      "Description":"S3 bucket for lambda function",
      "Type":"String",
      "Default": "lambda.vaibhavikhamar.me"
    },
    "DomainNameLambda":{
      "Description":"lambda domain name",
      "Type":"String",
      "Default": "prod.vaibhavikhamar.me"
    },
    "LambdaFuntionName": {
      "Type": "String",
      "Default": "myfunction"
    },
    "LambdaFuntionHandler": {
      "Type": "String",
      "Default": "index.handler"
    },
    "LambdaFuntionRuntime": {
      "Type": "String",
      "Default": "nodejs12.x"
    },
    "AmazonSNSFullAccess": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
    },
    "BucketRegion": {
      "Type": "String",
      "Default": "us-east-1"
    },
    "SSLSecurityGroupNameTag": {
      "Type": "String"
    },
    "CertyARN": {
      "Type": "String",
      "Default": "arn:aws:acm:us-east-1:148155028146:certificate/cefc41f6-d357-40bd-94eb-49bba53230c6"
    }
  },
  "Resources": {
    "myVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "vpccidr"
        },
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "vpcTag"
            }
          }
        ]
      }
    },
    "webSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "websubnetcidr"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "webSubnetTag"
            }
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        },
        "AvailabilityZone": {
          "Ref": "webSubnetZone3"
        }
      }
    },
    "webSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "websubnet2cidr"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "webSubnet2Tag"
            }
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        },
        "AvailabilityZone": {
          "Ref": "webSubnetZone2"
        }
      }
    },
    "webSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "websubnet3cidr"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "webSubnet3Tag"
            }
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        },
        "AvailabilityZone": {
          "Ref": "webSubnetZone"
        }
      }
    },
    "dbSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "dbsubnet1cidr"
        },
        "AvailabilityZone": {
          "Ref": "webSubnetZone3"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "dbSubnet2Tag"
            }
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "dbSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "dbsubnet2cidr"
        },
        "AvailabilityZone": {
          "Ref": "webSubnetZone2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "dbSubnetTag"
            }
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "myInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "igTag"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "InternetGatewayId": {
          "Ref": "myInternetGateway"
        }
      }
    },
    "publicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "publicRouteTableTag"
            }
          }
        ]
      }
    },
    "privateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "privateRouteTableTag"
            }
          }
        ]
      }
    },
    "publicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "myInternetGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "myInternetGateway"
        }
      }
    },
    "publicRouteTableSubnetAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicRouteTable"
        },
        "SubnetId": {
          "Ref": "webSubnet"
        }
      }
    },
    "publicRouteTableSubnetAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicRouteTable"
        },
        "SubnetId": {
          "Ref": "webSubnet2"
        }
      }
    },
    "publicRouteTableSubnetAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicRouteTable"
        },
        "SubnetId": {
          "Ref": "webSubnet3"
        }
      }
    },
    "privateRouteTableSubnetAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "privateRouteTable"
        },
        "SubnetId": {
          "Ref": "dbSubnet2"
        }
      }
    },
    "privateRouteTableSubnetAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "privateRouteTable"
        },
        "SubnetId": {
          "Ref": "dbSubnet1"
        }
      }
    },
    "webServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {
          "Ref": "webServerSecurityGroupNameTag"
        },
        "GroupDescription": "Security tag for web server",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 3001,
            "IpProtocol": "tcp",
            "ToPort": 3001
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "dbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {
          "Ref": "dbSecurityGroupNameTag"
        },
        "GroupDescription": "Security tag for web server",
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "webServerSecurityGroup"
            },
            "FromPort": 3306,
            "IpProtocol": "tcp",
            "ToPort": 3306
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "myEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile" 
        },
        "ImageId": {
          "Ref": "ec2AMI"
        },
        "InstanceType": {
          "Ref": "InstanceTypeParameter"
        },
        "SecurityGroupIds": [
          {
            "Ref": "webServerSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": "20"
            }
          }
        ],
        "KeyName": "ec2",
        "SubnetId": {
          "Ref": "webSubnet"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_USERNAME=${rusername}' >> /etc/environment",
                    {
                      "rusername": {
                        "Ref": "RdsUserName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_PASSWORD=${rpassword}' >> /etc/environment",
                    {
                      "rpassword": {
                        "Ref": "RdsPassword"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_DBNAME=${hname}' >> /etc/environment",
                    {
                      "hname": {
                        "Ref": "RdsHostname"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'S3BUCKET_NAME=${s3name}' >> /etc/environment",
                    {
                      "s3name": {
                        "Ref": "S3bucket"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDSHOST_NAME=${host}' >> /etc/environment",
                    {
                      "host": {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EC2Webapplication"
          }
        ]
      },
      "DependsOn": "myRDSInstance"
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet description of db subnets",
        "SubnetIds": [
          {
            "Ref": "dbSubnet2"
          },
          {
            "Ref": "dbSubnet1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "dbSubnetGroup"
          }
        ]
      }
    },
    "myRDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": {
          "Ref": "RdsHostname"
        },
        "AllocatedStorage": "8",
        "BackupRetentionPeriod": "0",
        "Engine": "MySQL",
        "EngineVersion": "5.7.25",
        "DBInstanceClass": "db.t3.micro",
        "MultiAZ": false,
        "DBInstanceIdentifier": "csye6225-spring2020",
        "MasterUsername": {
          "Ref": "RdsUserName"
        },
        "MasterUserPassword": {
          "Ref": "RdsPassword"
        },
        "DBSubnetGroupName": {
          "Ref": "myDBSubnetGroup"
        },
        "PubliclyAccessible": false,
        "CACertificateIdentifier": "rds-ca-2019",
        "StorageEncrypted": true,
        "DBParameterGroupName": {
          "Ref": "ParameterGroup"
        },
        "VPCSecurityGroups": [
          {
            "Ref": "dbSecurityGroup"
          }
        ]
      }
    },
    "ParameterGroup": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Family": "MySQL5.7",
        "Description": "MySQL5.7.25 DB Parameter Group",
        "Parameters": {
          "performance_schema": "1"
        }
      }
    },
    "S3bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Status": "Enabled",
              "Transition": {
                "StorageClass": "STANDARD_IA",
                "TransitionInDays": 30
              }
            }
          ]
        }
      }
    },
    "ListS3BucketsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ListS3BucketsPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:List*",
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:PutObjectAcl"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3bucket" 
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3bucket" 
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "Bucketname" 
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "Bucketname" 
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole" 
          }
        ]
      }
    },
    "CodeDeployEC2S3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeploy-EC2-S3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "S3bucket"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:List*",
                "s3:Delete*",
                "s3:Put*"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "Bucketname"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    }, 
    "CircleCIUploadToS3": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "CircleCI-Upload-To-S3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "Bucketname"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "Users": [
          "circleci"
        ]
      }
    },
    "CircleCICodeDeploy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "CircleCI-Code-Deploy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "AWSREGION"
                      },
                      ":",
                      {
                        "Ref": "AWSACCOUNTID"
                      },
                      ":application:csye6225-webapp"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetDeploymentConfig"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "AWSREGION"
                      },
                      ":",
                      {
                        "Ref": "AWSACCOUNTID"
                      },
                      ":deploymentconfig:CodeDeployDefault.OneAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "AWSREGION"
                      },
                      ":",
                      {
                        "Ref": "AWSACCOUNTID"
                      },
                      ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "AWSREGION"
                      },
                      ":",
                      {
                        "Ref": "AWSACCOUNTID"
                      },
                      ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users": [
          "circleci"
        ]
      }
    },
    "CodeDeployEC2ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        ],
        "RoleName": "CodeDeployEC2ServiceRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "CodeDeployServiceRole",
        "ManagedPolicyArns": [
          {
            "Ref": "AWSCodeDeployRoleARN"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ],
        "InstanceProfileName": "EC2InstanceProfile"
      }
    },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "csye6225-webapp",
        "ComputePlatform": "Server"
      }
    },
    "CodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "CodeDeployApplication"
        },
        "AutoRollbackConfiguration": {
          "Enabled": true,
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        },
        "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "DeploymentGroupName": "csye6225-webapp-deployment",
        "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITH_TRAFFIC_CONTROL"
        },
        "Ec2TagFilters": [
          {
            "Key": "Name",
            "Value": "EC2Webapplication",
            "Type": "KEY_AND_VALUE"
          }
        ],
        "AutoScalingGroups": [
          {
            "Ref": "WebServerGroup"
          }
        ],
        "LoadBalancerInfo": {
          "TargetGroupInfoList": [
            {
              "Name": {
                "Fn::GetAtt": [
                  "LoadBalancerTargetGroup",
                  "TargetGroupName"
                ]
              }
            }
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    },



    "AutoScalingEC2Instance": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "myRDSInstance"
      ],
      "Properties": {
        "ImageId": {
          "Ref": "ec2AMI"
        },
        "InstanceType": {
          "Ref": "InstanceTypeParameter"
        },
        "SecurityGroups": [
          {
            "Ref": "webServerSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "KeyName": "ec2",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_USERNAME=${rusername}' >> /etc/environment",
                    {
                      "rusername": {
                        "Ref": "RdsUserName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_PASSWORD=${rpassword}' >> /etc/environment",
                    {
                      "rpassword": {
                        "Ref": "RdsPassword"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_DBNAME=${hname}' >> /etc/environment",
                    {
                      "hname": {
                        "Ref": "RdsHostname"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'S3BUCKET_NAME=${s3name}' >> /etc/environment",
                    {
                      "s3name": {
                        "Ref": "S3bucket"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDSHOST_NAME=${host}' >> /etc/environment",
                    {
                      "host": {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "SSLSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {
          "Ref": "SSLSecurityGroupNameTag"
        },
        "GroupDescription": "Security tag for load balancer ssl",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "csye6225-load-balancer",
        "Scheme": "internet-facing",
        "Type": "application",
        "SecurityGroups": [
          {
            "Ref": "SSLSecurityGroup"
          }
        ],
        "Subnets": [
          {
            "Ref": "webSubnet"
          },
          {
            "Ref": "webSubnet2"
          },
          {
            "Ref": "webSubnet3"
          }
        ]
      }
    },
    "LoadBalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 15,
        "UnhealthyThresholdCount": 2,
        "HealthyThresholdCount": 2,
        "HealthCheckPath": "/healthcheck",
        "Matcher":{
          "HttpCode": "401,200"
        },
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "20"
          }
        ],
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "TargetGroup"
            ]
          ]
        },
        "Port": 3001,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "myVPC"
        }
      },
      "DependsOn": [
        "ElasticLoadBalancer"
      ]
    },
    "Route53Records": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": {
          "Ref": "domainID"
        },
        "Name": {
          "Ref": "domainName"
        },
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::GetAtt": [
              "ElasticLoadBalancer",
              "CanonicalHostedZoneID"
            ]
          },
          "DNSName": {
            "Fn::GetAtt": [
              "ElasticLoadBalancer",
              "DNSName"
            ]
          }
        },
        "Type": "A"
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": {
          "Ref": "ElasticLoadBalancer"
        },
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "LoadBalancerTargetGroup"
            }
          }
        ],
        "Port": "443",
        "Protocol": "HTTPS",
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "CertyARN"
            }
          }
        ]
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "csyeAutoScalingGroup",
        "Cooldown": "60",
        "DesiredCapacity": "2",
        "LaunchConfigurationName": {
          "Ref": "AutoScalingEC2Instance"
        },
        "MaxSize": "5",
        "MinSize": "2",
        "TargetGroupARNs": [
          {
            "Ref": "LoadBalancerTargetGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "EC2Webapplication",
            "PropagateAtLaunch": "True"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "webSubnet"
          },
          {
            "Ref": "webSubnet2"
          },
          {
            "Ref": "webSubnet3"
          }
        ]
      }
    },
    "ELBSecurityGroup" : {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription": "security group",
        "VpcId" : { "Ref" : "myVPC" },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "To allow world for port 80",
            "FromPort": "80",
            "ToPort": "80",
            "IpProtocol": "TCP"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "ELBSecurityGroup"
          }
        ]
      }
    },
    "LBWebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "LBWebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU greater than 5%",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "5",
        "AlarmActions": [
          {
            "Ref": "LBWebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU is lesser than 3%",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "2",
        "Threshold": "3",
        "AlarmActions": [
          {
            "Ref": "LBWebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "SqsQueue":{
      "Type":"AWS::SQS::Queue",
      "Properties":{
        "DelaySeconds":2,
        "MessageRetentionPeriod":3600,
        "QueueName":"myQueue",
        "ReceiveMessageWaitTimeSeconds":10,
        "VisibilityTimeout":10
      }
    },
    "AWSLambdaExecutePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "AWSLambdaExecute3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:UpdateFunctionCode"
              ],
              "Resource": "*"
            }
          ]
        },
        "Users": [
          "circleci"
        ],
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "LambdaSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "bill_due",
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "EmailApplication",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "LambdaTriggerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "LambdaSNSTopic"
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "EmailApplication",
            "Arn"
          ]
        }
      }
    },
    "LambdaServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":"lambda.amazonaws.com"
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonRoute53ReadOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSESFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        ],
        "RoleName":"LambdaServiceRole"
      }
    },
    "myDynamoDB":{
      "Type":"AWS::DynamoDB::Table",
      "Properties":{
        "TimeToLiveSpecification":{
          "AttributeName":"deleteTime",
          "Enabled":"true"
        },
        "BillingMode":"PROVISIONED",
        "ProvisionedThroughput":{
          "ReadCapacityUnits":"2",
          "WriteCapacityUnits":"2"
        },
        "AttributeDefinitions":[
          {
            "AttributeName":"email",
            "AttributeType":"S"
          }
        ],
        "TableName":"csye6225",
        "KeySchema":[
          {
            "AttributeName":"email",
            "KeyType":"HASH"
          }
        ]
      }
    },
    "lambdaToCallCloudWatchAndDynamo":{
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"LambdaDynamoDBPolicy",
        "PolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Action":[
                "dynamodb:BatchGetItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem"
              ],
              "Resource":{
                "Fn::GetAtt":[
                  "myDynamoDB",
                  "Arn"
                ]
              }
            },
            {
              "Effect":"Allow",
              "Action":[
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource":[
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:logs:",
                      {
                        "Ref":"BucketRegion"
                      },
                      ":",
                      {
                        "Ref":"AWSACCOUNTID"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect":"Allow",
              "Action":"logs:CreateLogGroup",
              "Resource":"*"
            },
            {
              "Effect":"Allow",
              "Action":[
                "ses:SendEmail",
                "ses:SendRawEmail"
              ],
              "Resource":"*"
            },
            {
              "Effect":"Allow",
              "Action":[
                "s3:*"
              ],
              "Resource":[
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref":"S3BucketLambda"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users":[
          "circleci"
        ],
        "Roles":[
          {
            "Ref":"LambdaServiceRole"
          }
        ]
      }
    },
    "EmailApplication": {
      "Type": "AWS::Lambda::Function",
      "Description": "lambda function for triggering email service",
      "Properties": {
        "Code":{
          "S3Bucket":{
            "Ref":"S3BucketLambda"
          },
          "S3Key":"serverless.zip"
        },
        "FunctionName": {
          "Ref": "LambdaFuntionName"
        },
        "Handler": {
          "Ref": "LambdaFuntionHandler"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRole",
            "Arn"
          ]
        },
        "Runtime": {
          "Ref": "LambdaFuntionRuntime"
        },
        "Timeout": 10,
        "Environment":{
          "Variables":{
            "DOMAIN_NAME":{
              "Ref":"DomainNameLambda"
            },
            "DYNAMO_TABLE":"csye6225"
          }
        }
      }
    },
    "EC2accessSQSSNS":{
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"ec2_sns_sqs_policy",
        "PolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Action":"sqs:*",
              "Resource":[
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:sqs:*:",
                      {
                        "Ref":"AWSACCOUNTID"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect":"Allow",
              "Action":"sns:*",
              "Resource":[
                {
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:sns:*:",
                      {
                        "Ref":"AWSACCOUNTID"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users":[
          "circleci"
        ],
        "Roles":[
          {
            "Ref":"CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "SNSTopicSubscribePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ],
        "PolicyName": "SNS-Topic-Subscribe",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": {
                "Ref": "LambdaSNSTopic"
              }
            }
          ]
        }
      }
    }
    
  },
  "Outputs": {
    "EC2": {
      "Description": "The ID of the EC2 Instance",
      "Value": {
        "Ref": "myEC2Instance"
      },
      "Export": {
        "Name": "csye6225-cf-ec2"
      }
    },
    "vpcId": {
      "Description": "The ID of the VPC",
      "Value": {
        "Ref": "myVPC"
      },
      "Export": {
        "Name": "csye6225-Networking-vpc"
      }
    },
    "dbSubnet1Id": {
      "Description": "The ID of the db subnet 2",
      "Value": {
        "Ref": "dbSubnet1"
      }
    },
    "dbSubnet2Id": {
      "Description": "The ID of the db subnet 2",
      "Value": {
        "Ref": "dbSubnet2"
      },
      "Export": {
        "Name": "csye6225-Networking-db-subnet2Id"
      }
    },
    "webSubnetId": {
      "Description": "The ID of web subnet",
      "Value": {
        "Ref": "webSubnet"
      },
      "Export": {
        "Name": "csye6225-Networking-web-subnet"
      }
    },
    "webSubnet2Id": {
      "Description": "The ID of web subnet",
      "Value": {
        "Ref": "webSubnet2"
      },
      "Export": {
        "Name": "csye6225-Networking-web-subnet2"
      }
    },
    "webSubnet3Id": {
      "Description": "The ID of web subnet",
      "Value": {
        "Ref": "webSubnet3"
      },
      "Export": {
        "Name": "csye6225-Networking-web-subnet3"
      }
    },
    "webServerSecurityGroupId": {
      "Description": "The ID of web server security group",
      "Value": {
        "Ref": "webServerSecurityGroup"
      },
      "Export": {
        "Name": "csye6225-Networking-web-security-group"
      }
    },
    "dbSecurityGroupId": {
      "Description": "The ID of RDS security group",
      "Value": {
        "Ref": "dbSecurityGroup"
      },
      "Export": {
        "Name": "csye6225-Networking-db-security-group"
      }
    }
  }
}